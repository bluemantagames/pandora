name: Release
on:
  create:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  ReleaseType:
    runs-on: self-hosted
    outputs:
      release_type: ${{ steps.release_type.outputs.release_type }}
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 0
      - name: Checkout LFS objects
        run: git lfs checkout
      - id: release_type
        run: '${{ github.workspace }}/misc/release-type.sh'

  BuildAndroid:
    name: Build Android release
    runs-on: self-hosted
    needs: ReleaseType
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - name: Checkout LFS objects
        run: git lfs checkout
      - uses: actions/cache@v2
        with:
          path: Library
          key: Library-Android
      - uses: game-ci/unity-builder@v2.0-alpha-6
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: Android
          androidAppBundle: true
          androidKeystoreName: user.keystore
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}
          allowDirtyBuild: true # this is needed because the git lfs checkout leaves the branch dirty somehow
          buildMethod: UnityBuilderAction.Builder.BuildProject
      - uses: actions/upload-artifact@v2
        with:
          name: build-Android
          path: build/Android/Android.aab
      - uses: actions/upload-artifact@v2
        with:
          name: bundles-Android
          path: ServerData

  ReleaseInternal:
    name: Release to the Google Play Store
    runs-on: self-hosted
    needs: [ReleaseType, BuildAndroid, UploadBundles]
    if: ${{ needs.ReleaseType.outputs.release_type == 'staging' }}
    env:
      GOOGLE_PLAY_KEY_FILE: ${{ secrets.GOOGLE_PLAY_KEY_FILE }}
      GOOGLE_PLAY_KEY_FILE_PATH: ${{ format('{0}/fastlane/google-fastlane.json', github.workspace) }}
      ANDROID_BUILD_FILE_PATH: ${{ format('{0}/Android.aab/Android.aab', github.workspace) }}
      ANDROID_PACKAGE_NAME: ${{ secrets.ANDROID_PACKAGE_NAME }}
      ImageOS: ubuntu20
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - name: Checkout LFS objects
        run: git lfs checkout
      - name: Download Android Artifact
        uses: actions/download-artifact@v2
        with:
          name: build-Android
          path: Android.aab
      - name: Prepare for Upload
        run: echo "$GOOGLE_PLAY_KEY_FILE" > $GOOGLE_PLAY_KEY_FILE_PATH
      - uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-${{ hashFiles('**/Gemfile.lock') }}
      - name: Install Fastlane
        run: bundle install
      - name: Upload to Google Play Internal
        uses: maierj/fastlane-action@v2.0.0
        with:
          lane: 'android internal'
      - name: Tidy up artifact to avoid storage limit
        uses: geekyeggo/delete-artifact@v1
        with:
          name: build-Android
      - name: Tidy up artifact to avoid storage limit
        uses: geekyeggo/delete-artifact@v1
        with:
          name: bundles-Android

  UploadBundles:
    runs-on: self-hosted
    needs: [BuildAndroid]
    steps:
    - name: Download bundle
      uses: actions/download-artifact@v2
      with:
        name: bundles-Android
    - uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks
      env:
        AWS_S3_BUCKET: 'towersofminduir'
        AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
        AWS_REGION: 'fra1'
        SOURCE_DIR: 'ServerData'
        DEST_DIR: 'Addressables'
        AWS_S3_ENDPOINT: 'https://fra1.digitaloceanspaces.com/'

