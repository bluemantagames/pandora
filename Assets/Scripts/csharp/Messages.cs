// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: messages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pandora.Messages {

  /// <summary>Holder for reflection information generated from messages.proto</summary>
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5tZXNzYWdlcy5wcm90bxIQcGFuZG9yYS5tZXNzYWdlcyI1CgRKb2luEg0K",
            "BXRva2VuGAEgASgJEgwKBGRlY2sYAiADKAkSEAoIdXNlcm5hbWUYAyABKAki",
            "NAoFU3RhcnQSDAoEdGVhbRgBIAEoBRIRCgl0aW1lc3RhbXAYAiABKAQSCgoC",
            "aWQYAyABKAUiNAoKUGxheWVySW5mbxIKCgJpZBgBIAEoBRIMCgR0ZWFtGAIg",
            "ASgFEgwKBG1hbmEYAyABKAIiiQEKBVNwYXduEhEKCXBsYXllcl9pZBgFIAEo",
            "BRIMCgR0ZWFtGAQgASgFEg8KB3VuaXRfaWQYByABKAkSEQoJdW5pdF9uYW1l",
            "GAEgASgJEgkKAXgYAiABKAUSCQoBeRgDIAEoBRIRCgltYW5hX3VzZWQYBiAB",
            "KAUSEgoKZWxhcHNlZF9tcxgIIAEoBCJPCgdDb21tYW5kEhEKCXBsYXllcl9p",
            "ZBgFIAEoBRIMCgR0ZWFtGAQgASgFEg8KB3VuaXRfaWQYByABKAkSEgoKZWxh",
            "cHNlZF9tcxgIIAEoBCJoCgpHb2xkUmV3YXJkEhEKCXBsYXllcl9pZBgBIAEo",
            "BRIMCgR0ZWFtGAIgASgFEhIKCmdvbGRfc3BlbnQYAyABKAUSEQoJcmV3YXJk",
            "X2lkGAQgASgJEhIKCmVsYXBzZWRfbXMYBSABKAQiOAoNTWF0Y2hGaW5pc2hl",
            "ZBITCgt3aW5uZXJfdGVhbRgBIAEoBRISCgplbGFwc2VkX21zGAIgASgEImoK",
            "DkVuZ2luZVNuYXBzaG90EhAKCHNuYXBzaG90GAEgASgJEhEKCXRpbWVzdGFt",
            "cBgCIAEoBBISCgplbGFwc2VkX21zGAMgASgEEhEKCXBsYXllcl9pZBgFIAEo",
            "BRIMCgR0ZWFtGAQgASgFIkYKD0VuZ2luZVNuYXBzaG90cxIzCglzbmFwc2hv",
            "dHMYASADKAsyIC5wYW5kb3JhLm1lc3NhZ2VzLkVuZ2luZVNuYXBzaG90IoIB",
            "CgRTdGVwEhYKDnRpbWVfcGFzc2VkX21zGAEgASgNEi8KCGNvbW1hbmRzGAIg",
            "AygLMh0ucGFuZG9yYS5tZXNzYWdlcy5TdGVwQ29tbWFuZBIxCgtwbGF5ZXJf",
            "aW5mbxgDIAMoCzIcLnBhbmRvcmEubWVzc2FnZXMuUGxheWVySW5mbyK9AQoL",
            "U3RlcENvbW1hbmQSEQoJdGltZXN0YW1wGAIgASgEEigKBXNwYXduGAEgASgL",
            "MhcucGFuZG9yYS5tZXNzYWdlcy5TcGF3bkgAEjEKDHVuaXRfY29tbWFuZBgD",
            "IAEoCzIZLnBhbmRvcmEubWVzc2FnZXMuQ29tbWFuZEgAEjMKC2dvbGRfUmV3",
            "YXJkGAQgASgLMhwucGFuZG9yYS5tZXNzYWdlcy5Hb2xkUmV3YXJkSABCCQoH",
            "Y29tbWFuZCLZAgoOQ2xpZW50RW52ZWxvcGUSDQoFdG9rZW4YAyABKAkSJgoE",
            "am9pbhgCIAEoCzIWLnBhbmRvcmEubWVzc2FnZXMuSm9pbkgAEigKBXNwYXdu",
            "GAEgASgLMhcucGFuZG9yYS5tZXNzYWdlcy5TcGF3bkgAEiwKB2NvbW1hbmQY",
            "BCABKAsyGS5wYW5kb3JhLm1lc3NhZ2VzLkNvbW1hbmRIABIzCgtnb2xkX3Jl",
            "d2FyZBgHIAEoCzIcLnBhbmRvcmEubWVzc2FnZXMuR29sZFJld2FyZEgAEjkK",
            "Dm1hdGNoX2ZpbmlzaGVkGAUgASgLMh8ucGFuZG9yYS5tZXNzYWdlcy5NYXRj",
            "aEZpbmlzaGVkSAASPQoQZW5naW5lX3NuYXBzaG90cxgGIAEoCzIhLnBhbmRv",
            "cmEubWVzc2FnZXMuRW5naW5lU25hcHNob3RzSABCCQoHbWVzc2FnZSJtCg5T",
            "ZXJ2ZXJFbnZlbG9wZRIoCgVzdGFydBgBIAEoCzIXLnBhbmRvcmEubWVzc2Fn",
            "ZXMuU3RhcnRIABImCgRzdGVwGAMgASgLMhYucGFuZG9yYS5tZXNzYWdlcy5T",
            "dGVwSABCCQoHbWVzc2FnZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pandora.Messages.Join), global::Pandora.Messages.Join.Parser, new[]{ "Token", "Deck", "Username" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pandora.Messages.Start), global::Pandora.Messages.Start.Parser, new[]{ "Team", "Timestamp", "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pandora.Messages.PlayerInfo), global::Pandora.Messages.PlayerInfo.Parser, new[]{ "Id", "Team", "Mana" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pandora.Messages.Spawn), global::Pandora.Messages.Spawn.Parser, new[]{ "PlayerId", "Team", "UnitId", "UnitName", "X", "Y", "ManaUsed", "ElapsedMs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pandora.Messages.Command), global::Pandora.Messages.Command.Parser, new[]{ "PlayerId", "Team", "UnitId", "ElapsedMs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pandora.Messages.GoldReward), global::Pandora.Messages.GoldReward.Parser, new[]{ "PlayerId", "Team", "GoldSpent", "RewardId", "ElapsedMs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pandora.Messages.MatchFinished), global::Pandora.Messages.MatchFinished.Parser, new[]{ "WinnerTeam", "ElapsedMs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pandora.Messages.EngineSnapshot), global::Pandora.Messages.EngineSnapshot.Parser, new[]{ "Snapshot", "Timestamp", "ElapsedMs", "PlayerId", "Team" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pandora.Messages.EngineSnapshots), global::Pandora.Messages.EngineSnapshots.Parser, new[]{ "Snapshots" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pandora.Messages.Step), global::Pandora.Messages.Step.Parser, new[]{ "TimePassedMs", "Commands", "PlayerInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pandora.Messages.StepCommand), global::Pandora.Messages.StepCommand.Parser, new[]{ "Timestamp", "Spawn", "UnitCommand", "GoldReward" }, new[]{ "Command" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pandora.Messages.ClientEnvelope), global::Pandora.Messages.ClientEnvelope.Parser, new[]{ "Token", "Join", "Spawn", "Command", "GoldReward", "MatchFinished", "EngineSnapshots" }, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pandora.Messages.ServerEnvelope), global::Pandora.Messages.ServerEnvelope.Parser, new[]{ "Start", "Step" }, new[]{ "Message" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Sent by the client to join a match 
  /// </summary>
  public sealed partial class Join : pb::IMessage<Join> {
    private static readonly pb::MessageParser<Join> _parser = new pb::MessageParser<Join>(() => new Join());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Join> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pandora.Messages.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Join() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Join(Join other) : this() {
      token_ = other.token_;
      deck_ = other.deck_.Clone();
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Join Clone() {
      return new Join(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_deck_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> deck_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Deck {
      get { return deck_; }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 3;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Join);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Join other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if(!deck_.Equals(other.deck_)) return false;
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      hash ^= deck_.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      deck_.WriteTo(output, _repeated_deck_codec);
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      size += deck_.CalculateSize(_repeated_deck_codec);
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Join other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      deck_.Add(other.deck_);
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            deck_.AddEntriesFrom(input, _repeated_deck_codec);
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Sent by the server to signal match start 
  /// </summary>
  public sealed partial class Start : pb::IMessage<Start> {
    private static readonly pb::MessageParser<Start> _parser = new pb::MessageParser<Start>(() => new Start());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Start> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pandora.Messages.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Start() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Start(Start other) : this() {
      team_ = other.team_;
      timestamp_ = other.timestamp_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Start Clone() {
      return new Start(this);
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 1;
    private int team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private ulong timestamp_;
    /// <summary>
    /// In milliseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Start);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Start other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Team != other.Team) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Team != 0) hash ^= Team.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Team != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Team);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Timestamp);
      }
      if (Id != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Team != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Start other) {
      if (other == null) {
        return;
      }
      if (other.Team != 0) {
        Team = other.Team;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Team = input.ReadInt32();
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 24: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Player stats in each step
  /// </summary>
  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pandora.Messages.MessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      id_ = other.id_;
      team_ = other.team_;
      mana_ = other.mana_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 2;
    private int team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    /// <summary>Field number for the "mana" field.</summary>
    public const int ManaFieldNumber = 3;
    private float mana_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Mana {
      get { return mana_; }
      set {
        mana_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Team != other.Team) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Mana, other.Mana)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Team != 0) hash ^= Team.GetHashCode();
      if (Mana != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Mana);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Team != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Team);
      }
      if (Mana != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Mana);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Team != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
      }
      if (Mana != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Team != 0) {
        Team = other.Team;
      }
      if (other.Mana != 0F) {
        Mana = other.Mana;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Team = input.ReadInt32();
            break;
          }
          case 29: {
            Mana = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Used for unit spawns 
  /// </summary>
  public sealed partial class Spawn : pb::IMessage<Spawn> {
    private static readonly pb::MessageParser<Spawn> _parser = new pb::MessageParser<Spawn>(() => new Spawn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Spawn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pandora.Messages.MessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spawn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spawn(Spawn other) : this() {
      playerId_ = other.playerId_;
      team_ = other.team_;
      unitId_ = other.unitId_;
      unitName_ = other.unitName_;
      x_ = other.x_;
      y_ = other.y_;
      manaUsed_ = other.manaUsed_;
      elapsedMs_ = other.elapsedMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spawn Clone() {
      return new Spawn(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 5;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 4;
    private int team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    /// <summary>Field number for the "unit_id" field.</summary>
    public const int UnitIdFieldNumber = 7;
    private string unitId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnitId {
      get { return unitId_; }
      set {
        unitId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unit_name" field.</summary>
    public const int UnitNameFieldNumber = 1;
    private string unitName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnitName {
      get { return unitName_; }
      set {
        unitName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "mana_used" field.</summary>
    public const int ManaUsedFieldNumber = 6;
    private int manaUsed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ManaUsed {
      get { return manaUsed_; }
      set {
        manaUsed_ = value;
      }
    }

    /// <summary>Field number for the "elapsed_ms" field.</summary>
    public const int ElapsedMsFieldNumber = 8;
    private ulong elapsedMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ElapsedMs {
      get { return elapsedMs_; }
      set {
        elapsedMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Spawn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Spawn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Team != other.Team) return false;
      if (UnitId != other.UnitId) return false;
      if (UnitName != other.UnitName) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (ManaUsed != other.ManaUsed) return false;
      if (ElapsedMs != other.ElapsedMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (Team != 0) hash ^= Team.GetHashCode();
      if (UnitId.Length != 0) hash ^= UnitId.GetHashCode();
      if (UnitName.Length != 0) hash ^= UnitName.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (ManaUsed != 0) hash ^= ManaUsed.GetHashCode();
      if (ElapsedMs != 0UL) hash ^= ElapsedMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UnitName);
      }
      if (X != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Y);
      }
      if (Team != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Team);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayerId);
      }
      if (ManaUsed != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ManaUsed);
      }
      if (UnitId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(UnitId);
      }
      if (ElapsedMs != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(ElapsedMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (Team != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
      }
      if (UnitId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnitId);
      }
      if (UnitName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnitName);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (ManaUsed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ManaUsed);
      }
      if (ElapsedMs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ElapsedMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Spawn other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Team != 0) {
        Team = other.Team;
      }
      if (other.UnitId.Length != 0) {
        UnitId = other.UnitId;
      }
      if (other.UnitName.Length != 0) {
        UnitName = other.UnitName;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.ManaUsed != 0) {
        ManaUsed = other.ManaUsed;
      }
      if (other.ElapsedMs != 0UL) {
        ElapsedMs = other.ElapsedMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UnitName = input.ReadString();
            break;
          }
          case 16: {
            X = input.ReadInt32();
            break;
          }
          case 24: {
            Y = input.ReadInt32();
            break;
          }
          case 32: {
            Team = input.ReadInt32();
            break;
          }
          case 40: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 48: {
            ManaUsed = input.ReadInt32();
            break;
          }
          case 58: {
            UnitId = input.ReadString();
            break;
          }
          case 64: {
            ElapsedMs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Used for units commands 
  /// </summary>
  public sealed partial class Command : pb::IMessage<Command> {
    private static readonly pb::MessageParser<Command> _parser = new pb::MessageParser<Command>(() => new Command());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Command> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pandora.Messages.MessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command(Command other) : this() {
      playerId_ = other.playerId_;
      team_ = other.team_;
      unitId_ = other.unitId_;
      elapsedMs_ = other.elapsedMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command Clone() {
      return new Command(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 5;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 4;
    private int team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    /// <summary>Field number for the "unit_id" field.</summary>
    public const int UnitIdFieldNumber = 7;
    private string unitId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnitId {
      get { return unitId_; }
      set {
        unitId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "elapsed_ms" field.</summary>
    public const int ElapsedMsFieldNumber = 8;
    private ulong elapsedMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ElapsedMs {
      get { return elapsedMs_; }
      set {
        elapsedMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Command);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Command other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Team != other.Team) return false;
      if (UnitId != other.UnitId) return false;
      if (ElapsedMs != other.ElapsedMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (Team != 0) hash ^= Team.GetHashCode();
      if (UnitId.Length != 0) hash ^= UnitId.GetHashCode();
      if (ElapsedMs != 0UL) hash ^= ElapsedMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Team != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Team);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayerId);
      }
      if (UnitId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(UnitId);
      }
      if (ElapsedMs != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(ElapsedMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (Team != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
      }
      if (UnitId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnitId);
      }
      if (ElapsedMs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ElapsedMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Command other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Team != 0) {
        Team = other.Team;
      }
      if (other.UnitId.Length != 0) {
        UnitId = other.UnitId;
      }
      if (other.ElapsedMs != 0UL) {
        ElapsedMs = other.ElapsedMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 32: {
            Team = input.ReadInt32();
            break;
          }
          case 40: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 58: {
            UnitId = input.ReadString();
            break;
          }
          case 64: {
            ElapsedMs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Used for gold rewards 
  /// </summary>
  public sealed partial class GoldReward : pb::IMessage<GoldReward> {
    private static readonly pb::MessageParser<GoldReward> _parser = new pb::MessageParser<GoldReward>(() => new GoldReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoldReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pandora.Messages.MessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoldReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoldReward(GoldReward other) : this() {
      playerId_ = other.playerId_;
      team_ = other.team_;
      goldSpent_ = other.goldSpent_;
      rewardId_ = other.rewardId_;
      elapsedMs_ = other.elapsedMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoldReward Clone() {
      return new GoldReward(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 2;
    private int team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    /// <summary>Field number for the "gold_spent" field.</summary>
    public const int GoldSpentFieldNumber = 3;
    private int goldSpent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoldSpent {
      get { return goldSpent_; }
      set {
        goldSpent_ = value;
      }
    }

    /// <summary>Field number for the "reward_id" field.</summary>
    public const int RewardIdFieldNumber = 4;
    private string rewardId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RewardId {
      get { return rewardId_; }
      set {
        rewardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "elapsed_ms" field.</summary>
    public const int ElapsedMsFieldNumber = 5;
    private ulong elapsedMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ElapsedMs {
      get { return elapsedMs_; }
      set {
        elapsedMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoldReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoldReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Team != other.Team) return false;
      if (GoldSpent != other.GoldSpent) return false;
      if (RewardId != other.RewardId) return false;
      if (ElapsedMs != other.ElapsedMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (Team != 0) hash ^= Team.GetHashCode();
      if (GoldSpent != 0) hash ^= GoldSpent.GetHashCode();
      if (RewardId.Length != 0) hash ^= RewardId.GetHashCode();
      if (ElapsedMs != 0UL) hash ^= ElapsedMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (Team != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Team);
      }
      if (GoldSpent != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GoldSpent);
      }
      if (RewardId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RewardId);
      }
      if (ElapsedMs != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ElapsedMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (Team != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
      }
      if (GoldSpent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldSpent);
      }
      if (RewardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RewardId);
      }
      if (ElapsedMs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ElapsedMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoldReward other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Team != 0) {
        Team = other.Team;
      }
      if (other.GoldSpent != 0) {
        GoldSpent = other.GoldSpent;
      }
      if (other.RewardId.Length != 0) {
        RewardId = other.RewardId;
      }
      if (other.ElapsedMs != 0UL) {
        ElapsedMs = other.ElapsedMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Team = input.ReadInt32();
            break;
          }
          case 24: {
            GoldSpent = input.ReadInt32();
            break;
          }
          case 34: {
            RewardId = input.ReadString();
            break;
          }
          case 40: {
            ElapsedMs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Used when the match is finished 
  /// </summary>
  public sealed partial class MatchFinished : pb::IMessage<MatchFinished> {
    private static readonly pb::MessageParser<MatchFinished> _parser = new pb::MessageParser<MatchFinished>(() => new MatchFinished());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchFinished> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pandora.Messages.MessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchFinished() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchFinished(MatchFinished other) : this() {
      winnerTeam_ = other.winnerTeam_;
      elapsedMs_ = other.elapsedMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchFinished Clone() {
      return new MatchFinished(this);
    }

    /// <summary>Field number for the "winner_team" field.</summary>
    public const int WinnerTeamFieldNumber = 1;
    private int winnerTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinnerTeam {
      get { return winnerTeam_; }
      set {
        winnerTeam_ = value;
      }
    }

    /// <summary>Field number for the "elapsed_ms" field.</summary>
    public const int ElapsedMsFieldNumber = 2;
    private ulong elapsedMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ElapsedMs {
      get { return elapsedMs_; }
      set {
        elapsedMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchFinished);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchFinished other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WinnerTeam != other.WinnerTeam) return false;
      if (ElapsedMs != other.ElapsedMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WinnerTeam != 0) hash ^= WinnerTeam.GetHashCode();
      if (ElapsedMs != 0UL) hash ^= ElapsedMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WinnerTeam != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WinnerTeam);
      }
      if (ElapsedMs != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ElapsedMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WinnerTeam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinnerTeam);
      }
      if (ElapsedMs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ElapsedMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchFinished other) {
      if (other == null) {
        return;
      }
      if (other.WinnerTeam != 0) {
        WinnerTeam = other.WinnerTeam;
      }
      if (other.ElapsedMs != 0UL) {
        ElapsedMs = other.ElapsedMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WinnerTeam = input.ReadInt32();
            break;
          }
          case 16: {
            ElapsedMs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Used to send a snapshot of the engine
  /// in a specific moment
  /// </summary>
  public sealed partial class EngineSnapshot : pb::IMessage<EngineSnapshot> {
    private static readonly pb::MessageParser<EngineSnapshot> _parser = new pb::MessageParser<EngineSnapshot>(() => new EngineSnapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EngineSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pandora.Messages.MessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EngineSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EngineSnapshot(EngineSnapshot other) : this() {
      snapshot_ = other.snapshot_;
      timestamp_ = other.timestamp_;
      elapsedMs_ = other.elapsedMs_;
      playerId_ = other.playerId_;
      team_ = other.team_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EngineSnapshot Clone() {
      return new EngineSnapshot(this);
    }

    /// <summary>Field number for the "snapshot" field.</summary>
    public const int SnapshotFieldNumber = 1;
    private string snapshot_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Snapshot {
      get { return snapshot_; }
      set {
        snapshot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "elapsed_ms" field.</summary>
    public const int ElapsedMsFieldNumber = 3;
    private ulong elapsedMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ElapsedMs {
      get { return elapsedMs_; }
      set {
        elapsedMs_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 5;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 4;
    private int team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EngineSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EngineSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Snapshot != other.Snapshot) return false;
      if (Timestamp != other.Timestamp) return false;
      if (ElapsedMs != other.ElapsedMs) return false;
      if (PlayerId != other.PlayerId) return false;
      if (Team != other.Team) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Snapshot.Length != 0) hash ^= Snapshot.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (ElapsedMs != 0UL) hash ^= ElapsedMs.GetHashCode();
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (Team != 0) hash ^= Team.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Snapshot.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Snapshot);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Timestamp);
      }
      if (ElapsedMs != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ElapsedMs);
      }
      if (Team != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Team);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Snapshot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Snapshot);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (ElapsedMs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ElapsedMs);
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (Team != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EngineSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.Snapshot.Length != 0) {
        Snapshot = other.Snapshot;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.ElapsedMs != 0UL) {
        ElapsedMs = other.ElapsedMs;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Team != 0) {
        Team = other.Team;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Snapshot = input.ReadString();
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 24: {
            ElapsedMs = input.ReadUInt64();
            break;
          }
          case 32: {
            Team = input.ReadInt32();
            break;
          }
          case 40: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EngineSnapshots : pb::IMessage<EngineSnapshots> {
    private static readonly pb::MessageParser<EngineSnapshots> _parser = new pb::MessageParser<EngineSnapshots>(() => new EngineSnapshots());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EngineSnapshots> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pandora.Messages.MessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EngineSnapshots() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EngineSnapshots(EngineSnapshots other) : this() {
      snapshots_ = other.snapshots_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EngineSnapshots Clone() {
      return new EngineSnapshots(this);
    }

    /// <summary>Field number for the "snapshots" field.</summary>
    public const int SnapshotsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pandora.Messages.EngineSnapshot> _repeated_snapshots_codec
        = pb::FieldCodec.ForMessage(10, global::Pandora.Messages.EngineSnapshot.Parser);
    private readonly pbc::RepeatedField<global::Pandora.Messages.EngineSnapshot> snapshots_ = new pbc::RepeatedField<global::Pandora.Messages.EngineSnapshot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pandora.Messages.EngineSnapshot> Snapshots {
      get { return snapshots_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EngineSnapshots);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EngineSnapshots other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!snapshots_.Equals(other.snapshots_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= snapshots_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      snapshots_.WriteTo(output, _repeated_snapshots_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += snapshots_.CalculateSize(_repeated_snapshots_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EngineSnapshots other) {
      if (other == null) {
        return;
      }
      snapshots_.Add(other.snapshots_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            snapshots_.AddEntriesFrom(input, _repeated_snapshots_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents a LockStep step
  /// </summary>
  public sealed partial class Step : pb::IMessage<Step> {
    private static readonly pb::MessageParser<Step> _parser = new pb::MessageParser<Step>(() => new Step());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Step> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pandora.Messages.MessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Step() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Step(Step other) : this() {
      timePassedMs_ = other.timePassedMs_;
      commands_ = other.commands_.Clone();
      playerInfo_ = other.playerInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Step Clone() {
      return new Step(this);
    }

    /// <summary>Field number for the "time_passed_ms" field.</summary>
    public const int TimePassedMsFieldNumber = 1;
    private uint timePassedMs_;
    /// <summary>
    /// time passed for a step, in ms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimePassedMs {
      get { return timePassedMs_; }
      set {
        timePassedMs_ = value;
      }
    }

    /// <summary>Field number for the "commands" field.</summary>
    public const int CommandsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pandora.Messages.StepCommand> _repeated_commands_codec
        = pb::FieldCodec.ForMessage(18, global::Pandora.Messages.StepCommand.Parser);
    private readonly pbc::RepeatedField<global::Pandora.Messages.StepCommand> commands_ = new pbc::RepeatedField<global::Pandora.Messages.StepCommand>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pandora.Messages.StepCommand> Commands {
      get { return commands_; }
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pandora.Messages.PlayerInfo> _repeated_playerInfo_codec
        = pb::FieldCodec.ForMessage(26, global::Pandora.Messages.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Pandora.Messages.PlayerInfo> playerInfo_ = new pbc::RepeatedField<global::Pandora.Messages.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pandora.Messages.PlayerInfo> PlayerInfo {
      get { return playerInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Step);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Step other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimePassedMs != other.TimePassedMs) return false;
      if(!commands_.Equals(other.commands_)) return false;
      if(!playerInfo_.Equals(other.playerInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimePassedMs != 0) hash ^= TimePassedMs.GetHashCode();
      hash ^= commands_.GetHashCode();
      hash ^= playerInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimePassedMs != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TimePassedMs);
      }
      commands_.WriteTo(output, _repeated_commands_codec);
      playerInfo_.WriteTo(output, _repeated_playerInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimePassedMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimePassedMs);
      }
      size += commands_.CalculateSize(_repeated_commands_codec);
      size += playerInfo_.CalculateSize(_repeated_playerInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Step other) {
      if (other == null) {
        return;
      }
      if (other.TimePassedMs != 0) {
        TimePassedMs = other.TimePassedMs;
      }
      commands_.Add(other.commands_);
      playerInfo_.Add(other.playerInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TimePassedMs = input.ReadUInt32();
            break;
          }
          case 18: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
          case 26: {
            playerInfo_.AddEntriesFrom(input, _repeated_playerInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Wrapper for a oneof. Needed in order to have it be repeated
  /// </summary>
  public sealed partial class StepCommand : pb::IMessage<StepCommand> {
    private static readonly pb::MessageParser<StepCommand> _parser = new pb::MessageParser<StepCommand>(() => new StepCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StepCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pandora.Messages.MessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepCommand(StepCommand other) : this() {
      timestamp_ = other.timestamp_;
      switch (other.CommandCase) {
        case CommandOneofCase.Spawn:
          Spawn = other.Spawn.Clone();
          break;
        case CommandOneofCase.UnitCommand:
          UnitCommand = other.UnitCommand.Clone();
          break;
        case CommandOneofCase.GoldReward:
          GoldReward = other.GoldReward.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepCommand Clone() {
      return new StepCommand(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private ulong timestamp_;
    /// <summary>
    /// In milliseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "spawn" field.</summary>
    public const int SpawnFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pandora.Messages.Spawn Spawn {
      get { return commandCase_ == CommandOneofCase.Spawn ? (global::Pandora.Messages.Spawn) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Spawn;
      }
    }

    /// <summary>Field number for the "unit_command" field.</summary>
    public const int UnitCommandFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pandora.Messages.Command UnitCommand {
      get { return commandCase_ == CommandOneofCase.UnitCommand ? (global::Pandora.Messages.Command) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UnitCommand;
      }
    }

    /// <summary>Field number for the "gold_Reward" field.</summary>
    public const int GoldRewardFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pandora.Messages.GoldReward GoldReward {
      get { return commandCase_ == CommandOneofCase.GoldReward ? (global::Pandora.Messages.GoldReward) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.GoldReward;
      }
    }

    private object command_;
    /// <summary>Enum of possible cases for the "command" oneof.</summary>
    public enum CommandOneofCase {
      None = 0,
      Spawn = 1,
      UnitCommand = 3,
      GoldReward = 4,
    }
    private CommandOneofCase commandCase_ = CommandOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandOneofCase CommandCase {
      get { return commandCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCommand() {
      commandCase_ = CommandOneofCase.None;
      command_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StepCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StepCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(Spawn, other.Spawn)) return false;
      if (!object.Equals(UnitCommand, other.UnitCommand)) return false;
      if (!object.Equals(GoldReward, other.GoldReward)) return false;
      if (CommandCase != other.CommandCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (commandCase_ == CommandOneofCase.Spawn) hash ^= Spawn.GetHashCode();
      if (commandCase_ == CommandOneofCase.UnitCommand) hash ^= UnitCommand.GetHashCode();
      if (commandCase_ == CommandOneofCase.GoldReward) hash ^= GoldReward.GetHashCode();
      hash ^= (int) commandCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (commandCase_ == CommandOneofCase.Spawn) {
        output.WriteRawTag(10);
        output.WriteMessage(Spawn);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Timestamp);
      }
      if (commandCase_ == CommandOneofCase.UnitCommand) {
        output.WriteRawTag(26);
        output.WriteMessage(UnitCommand);
      }
      if (commandCase_ == CommandOneofCase.GoldReward) {
        output.WriteRawTag(34);
        output.WriteMessage(GoldReward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (commandCase_ == CommandOneofCase.Spawn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spawn);
      }
      if (commandCase_ == CommandOneofCase.UnitCommand) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitCommand);
      }
      if (commandCase_ == CommandOneofCase.GoldReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GoldReward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StepCommand other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      switch (other.CommandCase) {
        case CommandOneofCase.Spawn:
          if (Spawn == null) {
            Spawn = new global::Pandora.Messages.Spawn();
          }
          Spawn.MergeFrom(other.Spawn);
          break;
        case CommandOneofCase.UnitCommand:
          if (UnitCommand == null) {
            UnitCommand = new global::Pandora.Messages.Command();
          }
          UnitCommand.MergeFrom(other.UnitCommand);
          break;
        case CommandOneofCase.GoldReward:
          if (GoldReward == null) {
            GoldReward = new global::Pandora.Messages.GoldReward();
          }
          GoldReward.MergeFrom(other.GoldReward);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Pandora.Messages.Spawn subBuilder = new global::Pandora.Messages.Spawn();
            if (commandCase_ == CommandOneofCase.Spawn) {
              subBuilder.MergeFrom(Spawn);
            }
            input.ReadMessage(subBuilder);
            Spawn = subBuilder;
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 26: {
            global::Pandora.Messages.Command subBuilder = new global::Pandora.Messages.Command();
            if (commandCase_ == CommandOneofCase.UnitCommand) {
              subBuilder.MergeFrom(UnitCommand);
            }
            input.ReadMessage(subBuilder);
            UnitCommand = subBuilder;
            break;
          }
          case 34: {
            global::Pandora.Messages.GoldReward subBuilder = new global::Pandora.Messages.GoldReward();
            if (commandCase_ == CommandOneofCase.GoldReward) {
              subBuilder.MergeFrom(GoldReward);
            }
            input.ReadMessage(subBuilder);
            GoldReward = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Sent by the client 
  /// </summary>
  public sealed partial class ClientEnvelope : pb::IMessage<ClientEnvelope> {
    private static readonly pb::MessageParser<ClientEnvelope> _parser = new pb::MessageParser<ClientEnvelope>(() => new ClientEnvelope());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pandora.Messages.MessagesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientEnvelope(ClientEnvelope other) : this() {
      token_ = other.token_;
      switch (other.MessageCase) {
        case MessageOneofCase.Join:
          Join = other.Join.Clone();
          break;
        case MessageOneofCase.Spawn:
          Spawn = other.Spawn.Clone();
          break;
        case MessageOneofCase.Command:
          Command = other.Command.Clone();
          break;
        case MessageOneofCase.GoldReward:
          GoldReward = other.GoldReward.Clone();
          break;
        case MessageOneofCase.MatchFinished:
          MatchFinished = other.MatchFinished.Clone();
          break;
        case MessageOneofCase.EngineSnapshots:
          EngineSnapshots = other.EngineSnapshots.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientEnvelope Clone() {
      return new ClientEnvelope(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "join" field.</summary>
    public const int JoinFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pandora.Messages.Join Join {
      get { return messageCase_ == MessageOneofCase.Join ? (global::Pandora.Messages.Join) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Join;
      }
    }

    /// <summary>Field number for the "spawn" field.</summary>
    public const int SpawnFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pandora.Messages.Spawn Spawn {
      get { return messageCase_ == MessageOneofCase.Spawn ? (global::Pandora.Messages.Spawn) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Spawn;
      }
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pandora.Messages.Command Command {
      get { return messageCase_ == MessageOneofCase.Command ? (global::Pandora.Messages.Command) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Command;
      }
    }

    /// <summary>Field number for the "gold_reward" field.</summary>
    public const int GoldRewardFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pandora.Messages.GoldReward GoldReward {
      get { return messageCase_ == MessageOneofCase.GoldReward ? (global::Pandora.Messages.GoldReward) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.GoldReward;
      }
    }

    /// <summary>Field number for the "match_finished" field.</summary>
    public const int MatchFinishedFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pandora.Messages.MatchFinished MatchFinished {
      get { return messageCase_ == MessageOneofCase.MatchFinished ? (global::Pandora.Messages.MatchFinished) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.MatchFinished;
      }
    }

    /// <summary>Field number for the "engine_snapshots" field.</summary>
    public const int EngineSnapshotsFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pandora.Messages.EngineSnapshots EngineSnapshots {
      get { return messageCase_ == MessageOneofCase.EngineSnapshots ? (global::Pandora.Messages.EngineSnapshots) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.EngineSnapshots;
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      Join = 2,
      Spawn = 1,
      Command = 4,
      GoldReward = 7,
      MatchFinished = 5,
      EngineSnapshots = 6,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (!object.Equals(Join, other.Join)) return false;
      if (!object.Equals(Spawn, other.Spawn)) return false;
      if (!object.Equals(Command, other.Command)) return false;
      if (!object.Equals(GoldReward, other.GoldReward)) return false;
      if (!object.Equals(MatchFinished, other.MatchFinished)) return false;
      if (!object.Equals(EngineSnapshots, other.EngineSnapshots)) return false;
      if (MessageCase != other.MessageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (messageCase_ == MessageOneofCase.Join) hash ^= Join.GetHashCode();
      if (messageCase_ == MessageOneofCase.Spawn) hash ^= Spawn.GetHashCode();
      if (messageCase_ == MessageOneofCase.Command) hash ^= Command.GetHashCode();
      if (messageCase_ == MessageOneofCase.GoldReward) hash ^= GoldReward.GetHashCode();
      if (messageCase_ == MessageOneofCase.MatchFinished) hash ^= MatchFinished.GetHashCode();
      if (messageCase_ == MessageOneofCase.EngineSnapshots) hash ^= EngineSnapshots.GetHashCode();
      hash ^= (int) messageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (messageCase_ == MessageOneofCase.Spawn) {
        output.WriteRawTag(10);
        output.WriteMessage(Spawn);
      }
      if (messageCase_ == MessageOneofCase.Join) {
        output.WriteRawTag(18);
        output.WriteMessage(Join);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (messageCase_ == MessageOneofCase.Command) {
        output.WriteRawTag(34);
        output.WriteMessage(Command);
      }
      if (messageCase_ == MessageOneofCase.MatchFinished) {
        output.WriteRawTag(42);
        output.WriteMessage(MatchFinished);
      }
      if (messageCase_ == MessageOneofCase.EngineSnapshots) {
        output.WriteRawTag(50);
        output.WriteMessage(EngineSnapshots);
      }
      if (messageCase_ == MessageOneofCase.GoldReward) {
        output.WriteRawTag(58);
        output.WriteMessage(GoldReward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (messageCase_ == MessageOneofCase.Join) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Join);
      }
      if (messageCase_ == MessageOneofCase.Spawn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spawn);
      }
      if (messageCase_ == MessageOneofCase.Command) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Command);
      }
      if (messageCase_ == MessageOneofCase.GoldReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GoldReward);
      }
      if (messageCase_ == MessageOneofCase.MatchFinished) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchFinished);
      }
      if (messageCase_ == MessageOneofCase.EngineSnapshots) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EngineSnapshots);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientEnvelope other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      switch (other.MessageCase) {
        case MessageOneofCase.Join:
          if (Join == null) {
            Join = new global::Pandora.Messages.Join();
          }
          Join.MergeFrom(other.Join);
          break;
        case MessageOneofCase.Spawn:
          if (Spawn == null) {
            Spawn = new global::Pandora.Messages.Spawn();
          }
          Spawn.MergeFrom(other.Spawn);
          break;
        case MessageOneofCase.Command:
          if (Command == null) {
            Command = new global::Pandora.Messages.Command();
          }
          Command.MergeFrom(other.Command);
          break;
        case MessageOneofCase.GoldReward:
          if (GoldReward == null) {
            GoldReward = new global::Pandora.Messages.GoldReward();
          }
          GoldReward.MergeFrom(other.GoldReward);
          break;
        case MessageOneofCase.MatchFinished:
          if (MatchFinished == null) {
            MatchFinished = new global::Pandora.Messages.MatchFinished();
          }
          MatchFinished.MergeFrom(other.MatchFinished);
          break;
        case MessageOneofCase.EngineSnapshots:
          if (EngineSnapshots == null) {
            EngineSnapshots = new global::Pandora.Messages.EngineSnapshots();
          }
          EngineSnapshots.MergeFrom(other.EngineSnapshots);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Pandora.Messages.Spawn subBuilder = new global::Pandora.Messages.Spawn();
            if (messageCase_ == MessageOneofCase.Spawn) {
              subBuilder.MergeFrom(Spawn);
            }
            input.ReadMessage(subBuilder);
            Spawn = subBuilder;
            break;
          }
          case 18: {
            global::Pandora.Messages.Join subBuilder = new global::Pandora.Messages.Join();
            if (messageCase_ == MessageOneofCase.Join) {
              subBuilder.MergeFrom(Join);
            }
            input.ReadMessage(subBuilder);
            Join = subBuilder;
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 34: {
            global::Pandora.Messages.Command subBuilder = new global::Pandora.Messages.Command();
            if (messageCase_ == MessageOneofCase.Command) {
              subBuilder.MergeFrom(Command);
            }
            input.ReadMessage(subBuilder);
            Command = subBuilder;
            break;
          }
          case 42: {
            global::Pandora.Messages.MatchFinished subBuilder = new global::Pandora.Messages.MatchFinished();
            if (messageCase_ == MessageOneofCase.MatchFinished) {
              subBuilder.MergeFrom(MatchFinished);
            }
            input.ReadMessage(subBuilder);
            MatchFinished = subBuilder;
            break;
          }
          case 50: {
            global::Pandora.Messages.EngineSnapshots subBuilder = new global::Pandora.Messages.EngineSnapshots();
            if (messageCase_ == MessageOneofCase.EngineSnapshots) {
              subBuilder.MergeFrom(EngineSnapshots);
            }
            input.ReadMessage(subBuilder);
            EngineSnapshots = subBuilder;
            break;
          }
          case 58: {
            global::Pandora.Messages.GoldReward subBuilder = new global::Pandora.Messages.GoldReward();
            if (messageCase_ == MessageOneofCase.GoldReward) {
              subBuilder.MergeFrom(GoldReward);
            }
            input.ReadMessage(subBuilder);
            GoldReward = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Sent by the server 
  /// </summary>
  public sealed partial class ServerEnvelope : pb::IMessage<ServerEnvelope> {
    private static readonly pb::MessageParser<ServerEnvelope> _parser = new pb::MessageParser<ServerEnvelope>(() => new ServerEnvelope());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pandora.Messages.MessagesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerEnvelope(ServerEnvelope other) : this() {
      switch (other.MessageCase) {
        case MessageOneofCase.Start:
          Start = other.Start.Clone();
          break;
        case MessageOneofCase.Step:
          Step = other.Step.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerEnvelope Clone() {
      return new ServerEnvelope(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pandora.Messages.Start Start {
      get { return messageCase_ == MessageOneofCase.Start ? (global::Pandora.Messages.Start) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Start;
      }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pandora.Messages.Step Step {
      get { return messageCase_ == MessageOneofCase.Step ? (global::Pandora.Messages.Step) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Step;
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      Start = 1,
      Step = 3,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Start, other.Start)) return false;
      if (!object.Equals(Step, other.Step)) return false;
      if (MessageCase != other.MessageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (messageCase_ == MessageOneofCase.Start) hash ^= Start.GetHashCode();
      if (messageCase_ == MessageOneofCase.Step) hash ^= Step.GetHashCode();
      hash ^= (int) messageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (messageCase_ == MessageOneofCase.Start) {
        output.WriteRawTag(10);
        output.WriteMessage(Start);
      }
      if (messageCase_ == MessageOneofCase.Step) {
        output.WriteRawTag(26);
        output.WriteMessage(Step);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (messageCase_ == MessageOneofCase.Start) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (messageCase_ == MessageOneofCase.Step) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Step);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerEnvelope other) {
      if (other == null) {
        return;
      }
      switch (other.MessageCase) {
        case MessageOneofCase.Start:
          if (Start == null) {
            Start = new global::Pandora.Messages.Start();
          }
          Start.MergeFrom(other.Start);
          break;
        case MessageOneofCase.Step:
          if (Step == null) {
            Step = new global::Pandora.Messages.Step();
          }
          Step.MergeFrom(other.Step);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Pandora.Messages.Start subBuilder = new global::Pandora.Messages.Start();
            if (messageCase_ == MessageOneofCase.Start) {
              subBuilder.MergeFrom(Start);
            }
            input.ReadMessage(subBuilder);
            Start = subBuilder;
            break;
          }
          case 26: {
            global::Pandora.Messages.Step subBuilder = new global::Pandora.Messages.Step();
            if (messageCase_ == MessageOneofCase.Step) {
              subBuilder.MergeFrom(Step);
            }
            input.ReadMessage(subBuilder);
            Step = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
